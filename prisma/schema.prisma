generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  PLANNED
  ACTIVE
  COMPLETED
  ON_HOLD
}

enum AppStatus {
  REJECTED
  OFFERED
  OPEN
  CLOSED
  MOVED
  NOT_APPLIED
  GHOSTED
  INTERVIEWING
}

// --------------------
// Core User
// --------------------
model User {
  firebase_uid           String                   @id
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @default(now())
  CandidateWritingSample CandidateWritingSample[]
  CandidateQuestionnaire CandidateQuestionnaire[]
  Resume                 Resume[]

  @@map("users")
}

// --------------------
// Company & Role
// --------------------
model Company {
  id              Int     @id @default(autoincrement())
  company_name    String  @unique
  description     String?
  website         String?
  industry        String?
  size            String?
  location        String?
  company_culture String?
  company_values  String?
  benefits        String?
  roles           Role[]

  @@map("companies")
}

model Role {
  id                     Int      @id @default(autoincrement())
  company_id             Int
  title                  String?
  description            String?
  salary_range           String?
  typical_salary_ask     String?
  typical_salary_reason  String?
  advised_salary_ask     String?
  advised_salary_reason  String?
  application_process    String?
  expected_response_time String?
  application_status     AppStatus? @default(NOT_APPLIED)
  user_applied           Boolean? @default(false)
  created_at             DateTime @default(now())
  updated_at             DateTime @default(now())

  company         Company          @relation(fields: [company_id], references: [id])
  jobRequirements JobRequirements?
  resumes         Resume[]

  @@map("roles")
}

// --------------------
// Job Requirements
// --------------------
model JobRequirements {
  id                        Int       @id @default(autoincrement())
  role_id                   Int       @unique
  other_info                String?
  years_of_exp              String?
  education_level           String?
  tools                     String[]
  programming_languages     String[]
  frameworks_and_libraries  String[]
  databases                 String[]
  cloud_technologies        String[]
  industry_keywords         String[]
  soft_skills               String[]
  certifications            String[]
  requirements              String[]
  nice_to_haves             String[]
  applicant_count           Int?
  code_assessment_completed Boolean?
  interview_count           Int?
  initial_application_date  DateTime?
  created_at                DateTime  @default(now())
  updated_at                DateTime  @default(now())

  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@map("job_requirements")
}

// --------------------
// Resume & Match Summary
// --------------------
model Resume {
  id           Int      @id @default(autoincrement())
  firebase_uid String
  role_id      Int
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  role         Role          @relation(fields: [role_id], references: [id])
  matchSummary MatchSummary?
  experiences  Experience[]
  projects     Project[]
  skills       Skill[]
  education    Education[]

  user User @relation(fields: [firebase_uid], references: [firebase_uid])

  @@map("resumes")
}

model MatchSummary {
  id              Int      @id @default(autoincrement())
  resume_id       Int      @unique
  should_apply    String
  reasoning       String
  metrics         String?
  overall_summary String?
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())

  resume Resume @relation(fields: [resume_id], references: [id], onDelete: Cascade)

  @@map("match_summaries")
}

// --------------------
// Experience
// --------------------
model Experience {
  id         Int       @id @default(autoincrement())
  resume_id  Int
  position   String
  company    String
  start_date DateTime
  end_date   DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())

  descriptions ExperienceDescription[]
  resume       Resume                  @relation(fields: [resume_id], references: [id], onDelete: Cascade)

  @@unique([resume_id, position, company, start_date])
  @@map("experiences")
}

model ExperienceDescription {
  id                       Int     @id @default(autoincrement())
  exp_id                   Int
  text                     String
  justification_for_change String?
  new_suggestion           Boolean

  experience Experience @relation(fields: [exp_id], references: [id], onDelete: Cascade)

  @@map("experience_descriptions")
}

// --------------------
// Project
// --------------------
model Project {
  id         Int           @id @default(autoincrement())
  resume_id  Int
  name       String
  role       String
  status     String
  created_at DateTime      @default(now())
  updated_at DateTime      @default(now())

  descriptions ProjectDescription[]
  resume       Resume               @relation(fields: [resume_id], references: [id], onDelete: Cascade)

  @@map("projects")
   @@unique([resume_id, name, role])
}

model ProjectDescription {
  id                       Int     @id @default(autoincrement())
  project_id               Int
  text                     String
  justification_for_change String?
  new_suggestion           Boolean

  project Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@map("project_descriptions")
}

// --------------------
// Skills
// --------------------
model Skill {
  id                        Int         @id @default(autoincrement())
  resume_id                 Int
  category                  String
  justification_for_changes String?
  created_at                DateTime    @default(now())
  updated_at                DateTime    @default(now())
  items                     SkillItem[]
  resume                    Resume      @relation(fields: [resume_id], references: [id], onDelete: Cascade)

  @@map("skills")
   @@unique([resume_id, category])
}

model SkillItem {
  id       Int    @id @default(autoincrement())
  skill_id Int
  name     String

  skill Skill @relation(fields: [skill_id], references: [id], onDelete: Cascade)

  @@map("skill_items")
}

// --------------------
// Education
// --------------------
model Education {
  id             Int       @id @default(autoincrement())
  resume_id      Int
  school         String
  degree         String
  field_of_study String
  start_date     DateTime
  end_date       DateTime?
  gpa            String?
  honors         String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())

  resume Resume @relation(fields: [resume_id], references: [id], onDelete: Cascade)

  @@map("education")
}

// --------------------
// Candidate Questionnaires & Writing Samples
// --------------------
model CandidateQuestionnaire {
  id            Int      @id @default(autoincrement())
  firebase_uid  String   @unique
  title         String?
  brief_history String?
  questions     String // JSON string array
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())

  user      User                    @relation(fields: [firebase_uid], references: [firebase_uid], onDelete: Cascade)
  responses QuestionnaireResponse[]

  @@map("candidate_questionnaires")
}

model CandidateWritingSample {
  id           Int      @id @default(autoincrement())
  firebase_uid String
  content      String
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  user User @relation(fields: [firebase_uid], references: [firebase_uid], onDelete: Cascade)

  @@map("candidate_writing_samples")
}

// --------------------
// Questionnaire Responses
// --------------------
model QuestionnaireResponse {
  id               Int      @id @default(autoincrement())
  questionnaire_id Int
  question         String
  response         String
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())

  questionnaire CandidateQuestionnaire @relation(fields: [questionnaire_id], references: [id], onDelete: Cascade)

  @@map("questionnaire_responses")
}
