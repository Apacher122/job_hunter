generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  PLANNED
  ACTIVE
  COMPLETED
  ON_HOLD
}

// --------------------
// Core User
// --------------------
model User {
  firebaseUid            String                   @id
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now())
  CandidateWritingSample CandidateWritingSample[]
  CandidateQuestionnaire CandidateQuestionnaire[]
  Resume                 Resume[]

  @@map("users")
}

// --------------------
// Company & Role
// --------------------
model Company {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  website     String
  industry    String
  size        String
  location    String
  culture     String
  values      String
  benefits    String
  roles       Role[]

  @@map("companies")
}

model Role {
  id                   Int      @id @default(autoincrement())
  companyId            Int
  title                String
  review               String
  typicalSalaryAsk     String
  typicalSalaryReason  String
  advisedSalaryAsk     String
  advisedSalaryReason  String
  applicationProcess   String
  expectedResponseTime String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())

  company         Company          @relation(fields: [companyId], references: [id])
  jobRequirements JobRequirements?
  resumes         Resume[]

  @@map("roles")
}

// --------------------
// Job Requirements
// --------------------
model JobRequirements {
  id                       Int       @id @default(autoincrement())
  roleId                   Int       @unique
  description              String?
  yearsOfExperience        String?
  educationLevel           String?
  tools                    String?
  progLanguages            String?
  frameworksAndLibs        String?
  databases                String?
  cloudPlatforms           String?
  industryKeywords         String?
  softSkills               String?
  certifications           String?
  requirements             String?
  niceToHaves              String?
  applicantCount           String?
  codeAssessmentCompleted  Boolean?
  interviewCount           Int?
  initialApplicationUpdate DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @default(now())

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("job_requirements")
}

// --------------------
// Resume & Match Summary
// --------------------
model Resume {
  id          Int      @id @default(autoincrement())
  firebaseUid String
  roleId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  role         Role          @relation(fields: [roleId], references: [id])
  matchSummary MatchSummary?
  experiences  Experience[]
  projects     Project[]
  skills       Skill[]
  education    Education[]

  user User @relation(fields: [firebaseUid], references: [firebaseUid])

  @@map("resumes")
}

model MatchSummary {
  id             Int      @id @default(autoincrement())
  resumeId       Int      @unique
  shouldApply    String
  reasoning      String
  metrics        String?
  overallSummary String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("match_summaries")
}

// --------------------
// Experience
// --------------------
model Experience {
  id        Int       @id @default(autoincrement())
  resumeId  Int
  position  String
  company   String
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  descriptions ExperienceDescription[]
  resume       Resume                  @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("experiences")
}

model ExperienceDescription {
  id                     Int     @id @default(autoincrement())
  experienceId           Int
  text                   String
  justificationForChange String?
  isNewSuggestion        Boolean

  experience Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@map("experience_descriptions")
}

// --------------------
// Project
// --------------------
model Project {
  id        Int           @id @default(autoincrement())
  resumeId  Int
  name      String
  role      String
  status    ProjectStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())

  descriptions ProjectDescription[]
  resume       Resume               @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model ProjectDescription {
  id                     Int     @id @default(autoincrement())
  projectId              Int
  text                   String
  justificationForChange String?
  isNewSuggestion        Boolean

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_descriptions")
}

// --------------------
// Skills
// --------------------
model Skill {
  id                      Int         @id @default(autoincrement())
  resumeId                Int
  category                String
  justificationForChanges String?
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @default(now())
  items                   SkillItem[]
  resume                  Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model SkillItem {
  id      Int    @id @default(autoincrement())
  skillId Int
  name    String

  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@map("skill_items")
}

// --------------------
// Education
// --------------------
model Education {
  id           Int       @id @default(autoincrement())
  resumeId     Int
  school       String
  degree       String
  fieldOfStudy String
  startDate    DateTime
  endDate      DateTime?
  gpa          String?
  honors       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("education")
}

// --------------------
// Candidate Questionnaires & Writing Samples
// --------------------
model CandidateQuestionnaire {
  id           Int      @id @default(autoincrement())
  firebaseUid  String   @unique
  title        String?
  briefHistory String?
  questions    String // JSON string array
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  user      User                    @relation(fields: [firebaseUid], references: [firebaseUid], onDelete: Cascade)
  responses QuestionnaireResponse[]

  @@map("candidate_questionnaires")
}

model CandidateWritingSample {
  id          Int      @id @default(autoincrement())
  firebaseUid String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  user User @relation(fields: [firebaseUid], references: [firebaseUid], onDelete: Cascade)

  @@map("candidate_writing_samples")
}

// --------------------
// Questionnaire Responses
// --------------------
model QuestionnaireResponse {
  id              Int      @id @default(autoincrement())
  questionnaireId Int
  question        String
  response        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  questionnaire CandidateQuestionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)

  @@map("questionnaire_responses")
}
