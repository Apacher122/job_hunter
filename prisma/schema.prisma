generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  PLANNED
  ACTIVE
  COMPLETED
  ON_HOLD
}

model User {
  firebaseUid   String       @id
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  resumes       Resume[]
  questionnaires CandidateQuestionnaire[]
  writingSamples CandidateWritingSample[]
}

model Company {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String
  website     String
  industry    String
  size        String
  location    String
  culture     String
  values      String
  benefits    String
  roles       Role[]
}

model Role {
  id                    Int       @id @default(autoincrement())
  companyId             Int
  title                 String
  review                String
  typicalSalaryAsk      String
  typicalSalaryReason   String
  advisedSalaryAsk      String
  advisedSalaryReason   String
  applicationProcess    String
  expectedResponseTime  String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  company        Company         @relation(fields: [companyId], references: [id])
  jobRequirements JobRequirements?
  resumes         Resume[]
}

model JobRequirements {
  id                    Int       @id @default(autoincrement())
  roleId                Int       @unique
  description           String?
  yearsOfExperience     String?
  educationLevel        String?
  tools                 String?   // JSON string array
  progLanguages         String?   // JSON string array
  frameworksAndLibs     String?   // JSON string array
  databases             String?   // JSON string array
  cloudPlatforms        String?   // JSON string array
  industryKeywords      String?   // JSON string array
  softSkills            String?   // JSON string array
  certifications        String?   // JSON string array
  requirements          String?   // JSON string array
  niceToHaves           String?   // JSON string array
  applicantCount        String?
  codeAssessmentCompleted Boolean?
  interviewCount        Int?
  initialApplicationUpdate DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Resume {
  id           Int       @id @default(autoincrement())
  firebaseUid  String
  roleId       Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  role         Role       @relation(fields: [roleId], references: [id])
  matchSummary MatchSummary?
  experiences  Experience[]
  projects     Project[]
  skills       Skill[]
  user         User       @relation(fields: [firebaseUid], references: [firebaseUid])
}

model MatchSummary {
  id             Int       @id @default(autoincrement())
  resumeId       Int       @unique
  shouldApply    String
  reasoning      String
  metrics        String?   // JSON string
  overallSummary String?   // JSON string
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Experience {
  id               Int                     @id @default(autoincrement())
  resumeId         Int
  position         String
  company          String
  startDate        DateTime
  endDate          DateTime?
  descriptions     ExperienceDescription[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ExperienceDescription {
  id                     Int        @id @default(autoincrement())
  experienceId           Int
  text                   String
  justificationForChange String?
  isNewSuggestion        Boolean    @default(false)

  experience Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
}

model Project {
  id                  Int                  @id @default(autoincrement())
  resumeId            Int
  name                String
  role                String
  status              ProjectStatus        @default(ACTIVE)
  descriptions        ProjectDescription[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ProjectDescription {
  id                     Int     @id @default(autoincrement())
  projectId              Int
  text                   String
  justificationForChange String?
  isNewSuggestion        Boolean @default(false)

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Skill {
  id                      Int         @id @default(autoincrement())
  resumeId                Int
  category                String
  justificationForChanges String?
  items                   SkillItem[]
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model SkillItem {
  id      Int    @id @default(autoincrement())
  skillId Int
  name    String

  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)
}

model CandidateQuestionnaire {
  id           Int       @id @default(autoincrement())
  firebaseUid  String
  briefHistory String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  questions QuestionnaireItem[]
  user      User @relation(fields: [firebaseUid], references: [firebaseUid], onDelete: Cascade)
}

model QuestionnaireItem {
  id               Int    @id @default(autoincrement())
  questionnaireId  Int
  category         String
  question         String
  answer           String?

  questionnaire CandidateQuestionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
}

model CandidateWritingSample {
  id          Int      @id @default(autoincrement())
  firebaseUid String
  content     String
  createdAt   DateTime @default(now())

  user User @relation(fields: [firebaseUid], references: [firebaseUid], onDelete: Cascade)
}
