generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model additional_information {
  id                Int           @id @default(autoincrement())
  job_posting_id    Int?
  information_title String?       @db.VarChar(255)
  text              String?
  job_postings      job_postings? @relation(fields: [job_posting_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model experience_descriptions {
  id                       Int          @id @default(autoincrement())
  experience_id            Int?
  text                     String
  justification_for_change String
  is_new_suggestion        Boolean
  experiences              experiences? @relation(fields: [experience_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model experiences {
  id                      Int                       @id @default(autoincrement())
  resume_id               Int?
  position                String                    @db.VarChar(255)
  company                 String                    @db.VarChar(255)
  start_date              String                    @db.VarChar(50)
  end_date                String                    @db.VarChar(50)
  experience_descriptions experience_descriptions[]

  @@unique([company, position], map: "unique_company_position")
}

model job_info {
  job_posting_id            Int          @id
  company_description       String?
  company_website           String?      @db.VarChar(255)
  company_industry          String?      @db.VarChar(255)
  company_size              String?      @db.VarChar(255)
  company_location          String?      @db.VarChar(255)
  company_culture           String?
  company_values            String?
  company_benefits          String?
  position_review           String?
  typical_salary_ask        String?      @db.VarChar(255)
  typical_salary_ask_reason String?
  advised_salary_ask        String?      @db.VarChar(255)
  advised_salary_ask_reason String?
  application_process       String?
  expected_response_time    String?      @db.VarChar(255)
  job_postings              job_postings @relation(fields: [job_posting_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model job_postings {
  id                              Int                            @id @default(autoincrement())
  body                            String?
  companyname                     String?                        @db.VarChar(255)
  url                             String?
  position                        String?                        @db.VarChar(255)
  rawcompanyname                  String?                        @db.VarChar(255)
  positionsummary                 String?
  yearsofexp                      String?                        @db.VarChar(255)
  educationlvl                    String?                        @db.VarChar(255)
  salary                          String?                        @db.VarChar(255)
  applicantcount                  String?                        @db.VarChar(255)
  jobdetails                      String?
  user_applied                    Boolean?                       @default(false)
  applied_on                      DateTime?                      @db.Date
  status                          application_status?            @default(Open)
  code_assessment_completed       Boolean?
  interview_count                 Int?
  initial_application_update_date DateTime?                      @db.Date
  test                            String[]
  nicetohaves                     String[]
  toolsandtech                    String[]
  proglanguages                   String[]
  frmwrksandlibs                  String[]
  databases                       String[]
  cloudplatforms                  String[]
  industrykeywords                String[]
  softskills                      String[]
  certifications                  String[]
  companyculture                  String[]
  companyvalues                   String[]
  requirements                    String[]
  additional_information          additional_information[]
  job_info                        job_info?
  match_summaries                 match_summaries?
  possible_interview_questions    possible_interview_questions[]
  resumes                         resumes?

  @@unique([companyname, position], map: "job_postings_company_name_position_key")
}

model possible_interview_questions {
  id                         Int           @id @default(autoincrement())
  job_posting_id             Int?
  is_behavioral_or_technical String?       @db.VarChar(50)
  question                   String
  question_source            String?
  answer                     String?
  what_they_look_for         String?
  what_to_study              String?
  job_postings               job_postings? @relation(fields: [job_posting_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model project_descriptions {
  id                       Int       @id @default(autoincrement())
  project_id               Int?
  text                     String
  justification_for_change String
  is_new_suggestion        Boolean
  projects                 projects? @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model projects {
  id                   Int                    @id @default(autoincrement())
  resume_id            Int?
  name                 String                 @db.VarChar(255)
  role                 String                 @db.VarChar(255)
  status               String                 @db.VarChar(255)
  project_descriptions project_descriptions[]
}

model resumes {
  id             Int           @id @default(autoincrement())
  job_posting_id Int?          @unique
  created_at     DateTime?     @default(now()) @db.Timestamp(6)
  job_postings   job_postings? @relation(fields: [job_posting_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model skill_items {
  id       Int     @id @default(autoincrement())
  skill_id Int?
  item     String  @db.VarChar(255)
  skills   skills? @relation(fields: [skill_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model skills {
  id                        Int           @id @default(autoincrement())
  resume_id                 Int?
  category                  String        @db.VarChar(255)
  justification_for_changes String
  skill_items               skill_items[]

  @@unique([resume_id, category])
}

model match_summaries {
  id                               Int          @id @default(autoincrement())
  job_posting_id                   Int          @unique
  should_apply                     String       @db.VarChar(50)
  should_apply_reasoning           String?
  metrics_json                     String?
  overall_summary_json             String?
  projects_section_missing_entries Boolean?
  created_at                       DateTime     @default(now())
  updated_at                       DateTime     @updatedAt
  job_postings                     job_postings @relation(fields: [job_posting_id], references: [id])
}

enum application_status {
  Open
  Rejected
  Offered
}
